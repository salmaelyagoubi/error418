[2024-05-18T02:06:30.283+0000] {local_task_job_runner.py:120} INFO - ::group::Pre task execution logs
[2024-05-18T02:06:30.320+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: data_ingestion_pipelines_2.validate_data scheduled__2024-05-17T00:00:00+00:00 [queued]>
[2024-05-18T02:06:30.329+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: data_ingestion_pipelines_2.validate_data scheduled__2024-05-17T00:00:00+00:00 [queued]>
[2024-05-18T02:06:30.332+0000] {taskinstance.py:2306} INFO - Starting attempt 9 of 9
[2024-05-18T02:06:30.347+0000] {taskinstance.py:2330} INFO - Executing <Task(PythonOperator): validate_data> on 2024-05-17 00:00:00+00:00
[2024-05-18T02:06:30.355+0000] {warnings.py:110} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:61: DeprecationWarning: This process (pid=1542) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-05-18T02:06:30.356+0000] {standard_task_runner.py:63} INFO - Started process 1558 to run task
[2024-05-18T02:06:30.357+0000] {standard_task_runner.py:90} INFO - Running: ['***', 'tasks', 'run', 'data_ingestion_pipelines_2', 'validate_data', 'scheduled__2024-05-17T00:00:00+00:00', '--job-id', '172', '--raw', '--subdir', 'DAGS_FOLDER/data-ingestion-dag.py', '--cfg-path', '/tmp/tmp3zef3bko']
[2024-05-18T02:06:30.358+0000] {standard_task_runner.py:91} INFO - Job 172: Subtask validate_data
[2024-05-18T02:06:30.413+0000] {task_command.py:426} INFO - Running <TaskInstance: data_ingestion_pipelines_2.validate_data scheduled__2024-05-17T00:00:00+00:00 [running]> on host 5ee845ef4e45
[2024-05-18T02:06:30.512+0000] {taskinstance.py:2648} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='***' AIRFLOW_CTX_DAG_ID='data_ingestion_pipelines_2' AIRFLOW_CTX_TASK_ID='validate_data' AIRFLOW_CTX_EXECUTION_DATE='2024-05-17T00:00:00+00:00' AIRFLOW_CTX_TRY_NUMBER='9' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2024-05-17T00:00:00+00:00'
[2024-05-18T02:06:30.513+0000] {taskinstance.py:430} INFO - ::endgroup::
[2024-05-18T02:06:30.540+0000] {logging_mixin.py:188} INFO - file_path in validate_data is  /opt/***/dags/raw-data/data_part_9.csv
[2024-05-18T02:06:30.541+0000] {logging_mixin.py:188} INFO - data_asset_name is  data_part_9
[2024-05-18T02:06:30.570+0000] {logging_mixin.py:188} INFO - Data types after reading CSV:
[2024-05-18T02:06:30.572+0000] {logging_mixin.py:188} INFO -  ph                 float64
Hardness           float64
Chloramines        float64
Sulfate            float64
Conductivity       float64
Organic_carbon     float64
Trihalomethanes    float64
Turbidity          float64
Potability           Int64
dtype: object
[2024-05-18T02:06:30.609+0000] {warnings.py:110} WARNING - /home/***/.local/lib/python3.12/site-packages/great_expectations/data_context/data_context/base_data_context.py:158: DeprecationWarning: DataContext and BaseDataContext are deprecated as of v0.17.10 and will be removed in v0.20. Please use gx.get_context instead.
  warnings.warn(

[2024-05-18T02:06:30.652+0000] {file_data_context.py:222} INFO - FileDataContext loading fluent config
[2024-05-18T02:06:30.674+0000] {config.py:187} INFO - Loading 'datasources' ->
[]
[2024-05-18T02:06:30.969+0000] {data_asset.py:541} INFO - 	29 expectation(s) included in expectation_suite.
[2024-05-18T02:06:31.049+0000] {logging_mixin.py:188} INFO - validation_results: {
  "success": false,
  "results": [
    {
      "success": false,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_match_regex",
        "kwargs": {
          "column": "ph",
          "regex": "^\\d*\\.?\\d*$"
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "missing_count": 0,
        "missing_percent": 0.0,
        "unexpected_count": 77,
        "unexpected_percent": 7.7,
        "unexpected_percent_total": 7.7,
        "unexpected_percent_nonmissing": 7.7,
        "partial_unexpected_list": [
          -6.812388827450592,
          -0.6291738461075891,
          -1.2539765208007625,
          -0.553825119848506,
          -2.1930095072863818,
          -0.8562993246936337,
          -7.39390308352648,
          -10.47442892331849,
          -2.150081814093671,
          -2.2945078223750297,
          -1.2449889215657244,
          -0.0365705995885843,
          -3.576434877208809,
          -3.374968588260068,
          -1.970275462427052,
          -4.722197484517528,
          -1.3775706080139756,
          -0.6911707967329122,
          -0.8309806496327763,
          -1.4597263640637674
        ]
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_not_be_null",
        "kwargs": {
          "column": "ph"
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "unexpected_count": 0,
        "unexpected_percent": 0.0,
        "unexpected_percent_total": 0.0,
        "partial_unexpected_list": []
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": false,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_between",
        "kwargs": {
          "column": "ph",
          "min_value": -14.0,
          "max_value": 14.0
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "missing_count": 0,
        "missing_percent": 0.0,
        "unexpected_count": 382,
        "unexpected_percent": 38.2,
        "unexpected_percent_total": 38.2,
        "unexpected_percent_nonmissing": 38.2,
        "partial_unexpected_list": [
          26.491734951030864,
          24.55100297417661,
          17.727658738617492,
          15.353645514755506,
          31.19164848756204,
          16.640835729637683,
          16.443394564057307,
          19.33309402274348,
          14.171437314544209,
          24.657535899127595,
          22.675092059293107,
          14.484576727230037,
          15.24848016043666,
          22.08958046291669,
          26.959921009122034,
          25.096244821308687,
          18.16081766067981,
          25.19307205380633,
          15.248044478728218,
          14.737227984682152
        ]
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_match_regex",
        "kwargs": {
          "column": "Hardness",
          "regex": "^\\d*\\.?\\d*$"
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "missing_count": 0,
        "missing_percent": 0.0,
        "unexpected_count": 0,
        "unexpected_percent": 0.0,
        "unexpected_percent_total": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "partial_unexpected_list": []
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_not_be_null",
        "kwargs": {
          "column": "Hardness"
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "unexpected_count": 0,
        "unexpected_percent": 0.0,
        "unexpected_percent_total": 0.0,
        "partial_unexpected_list": []
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_between",
        "kwargs": {
          "column": "Hardness",
          "min_value": 0.0,
          "max_value": 1000.0
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "missing_count": 0,
        "missing_percent": 0.0,
        "unexpected_count": 0,
        "unexpected_percent": 0.0,
        "unexpected_percent_total": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "partial_unexpected_list": []
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": false,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_match_regex",
        "kwargs": {
          "column": "Solids",
          "regex": "^\\d*\\.?\\d*$"
        },
        "meta": {}
      },
      "result": {},
      "meta": {},
      "exception_info": {
        "raised_exception": true,
        "exception_message": "KeyError: 'Solids'",
        "exception_traceback": "Traceback (most recent call last):\n  File \"/home/***/.local/lib/python3.12/site-packages/pandas/core/indexes/base.py\", line 3791, in get_loc\n    return self._engine.get_loc(casted_key)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"index.pyx\", line 152, in pandas._libs.index.IndexEngine.get_loc\n  File \"index.pyx\", line 181, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Solids'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/***/.local/lib/python3.12/site-packages/great_expectations/data_asset/data_asset.py\", line 244, in wrapper\n    return_obj = func(self, **evaluation_args)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/***/.local/lib/python3.12/site-packages/great_expectations/dataset/pandas_dataset.py\", line 81, in inner_wrapper\n    series = data[column]\n             ~~~~^^^^^^^^\n  File \"/home/***/.local/lib/python3.12/site-packages/pandas/core/frame.py\", line 3893, in __getitem__\n    indexer = self.columns.get_loc(key)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/***/.local/lib/python3.12/site-packages/pandas/core/indexes/base.py\", line 3798, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Solids'\n"
      }
    },
    {
      "success": false,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_not_be_null",
        "kwargs": {
          "column": "Solids"
        },
        "meta": {}
      },
      "result": {},
      "meta": {},
      "exception_info": {
        "raised_exception": true,
        "exception_message": "KeyError: 'Solids'",
        "exception_traceback": "Traceback (most recent call last):\n  File \"/home/***/.local/lib/python3.12/site-packages/pandas/core/indexes/base.py\", line 3791, in get_loc\n    return self._engine.get_loc(casted_key)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"index.pyx\", line 152, in pandas._libs.index.IndexEngine.get_loc\n  File \"index.pyx\", line 181, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Solids'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/***/.local/lib/python3.12/site-packages/great_expectations/data_asset/data_asset.py\", line 244, in wrapper\n    return_obj = func(self, **evaluation_args)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/***/.local/lib/python3.12/site-packages/great_expectations/dataset/pandas_dataset.py\", line 81, in inner_wrapper\n    series = data[column]\n             ~~~~^^^^^^^^\n  File \"/home/***/.local/lib/python3.12/site-packages/pandas/core/frame.py\", line 3893, in __getitem__\n    indexer = self.columns.get_loc(key)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/***/.local/lib/python3.12/site-packages/pandas/core/indexes/base.py\", line 3798, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Solids'\n"
      }
    },
    {
      "success": false,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_between",
        "kwargs": {
          "column": "Solids",
          "min_value": 0.0,
          "max_value": 50000.0
        },
        "meta": {}
      },
      "result": {},
      "meta": {},
      "exception_info": {
        "raised_exception": true,
        "exception_message": "KeyError: 'Solids'",
        "exception_traceback": "Traceback (most recent call last):\n  File \"/home/***/.local/lib/python3.12/site-packages/pandas/core/indexes/base.py\", line 3791, in get_loc\n    return self._engine.get_loc(casted_key)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"index.pyx\", line 152, in pandas._libs.index.IndexEngine.get_loc\n  File \"index.pyx\", line 181, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Solids'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/***/.local/lib/python3.12/site-packages/great_expectations/data_asset/data_asset.py\", line 244, in wrapper\n    return_obj = func(self, **evaluation_args)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/***/.local/lib/python3.12/site-packages/great_expectations/dataset/pandas_dataset.py\", line 81, in inner_wrapper\n    series = data[column]\n             ~~~~^^^^^^^^\n  File \"/home/***/.local/lib/python3.12/site-packages/pandas/core/frame.py\", line 3893, in __getitem__\n    indexer = self.columns.get_loc(key)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/***/.local/lib/python3.12/site-packages/pandas/core/indexes/base.py\", line 3798, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Solids'\n"
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_match_regex",
        "kwargs": {
          "column": "Chloramines",
          "regex": "^\\d*\\.?\\d*$"
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "missing_count": 0,
        "missing_percent": 0.0,
        "unexpected_count": 0,
        "unexpected_percent": 0.0,
        "unexpected_percent_total": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "partial_unexpected_list": []
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_not_be_null",
        "kwargs": {
          "column": "Chloramines"
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "unexpected_count": 0,
        "unexpected_percent": 0.0,
        "unexpected_percent_total": 0.0,
        "partial_unexpected_list": []
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": false,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_between",
        "kwargs": {
          "column": "Chloramines",
          "min_value": 0.0,
          "max_value": 10.0
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "missing_count": 0,
        "missing_percent": 0.0,
        "unexpected_count": 45,
        "unexpected_percent": 4.5,
        "unexpected_percent_total": 4.5,
        "unexpected_percent_nonmissing": 4.5,
        "partial_unexpected_list": [
          10.464753713443487,
          11.638051008984458,
          11.746109123747845,
          10.485419785826371,
          10.094794227817207,
          10.224463936557504,
          10.213840931058254,
          10.518343914322848,
          10.139816824761091,
          10.809081245996891,
          11.794879837850267,
          10.261333985450175,
          11.264614834126856,
          10.91528711389262,
          10.79852134473414,
          10.577330280106406,
          10.895866184293736,
          10.302017774921882,
          10.491925070329607,
          10.20913501156533
        ]
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": false,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_match_regex",
        "kwargs": {
          "column": "Sulfate",
          "regex": "^\\d*\\.?\\d*$"
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "missing_count": 0,
        "missing_percent": 0.0,
        "unexpected_count": 23,
        "unexpected_percent": 2.3,
        "unexpected_percent_total": 2.3,
        "unexpected_percent_nonmissing": 2.3,
        "partial_unexpected_list": [
          -117.74064324191812,
          -40.0596262244718,
          -36.765300083877776,
          -11.465881116955131,
          -0.6334585882966621,
          -75.51419986792422,
          -36.87611253101238,
          -44.79324749396022,
          -70.39023136024736,
          -53.28028912726853,
          -68.98266671474715,
          -10.823936740912586,
          -48.37237330292555,
          -58.583293500459376,
          -11.701194342445548,
          -51.72668332708975,
          -113.5265234602428,
          -3.771903889989744,
          -2.5229232349441304,
          -62.790027431107376
        ]
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_not_be_null",
        "kwargs": {
          "column": "Sulfate"
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "unexpected_count": 0,
        "unexpected_percent": 0.0,
        "unexpected_percent_total": 0.0,
        "partial_unexpected_list": []
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": false,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_between",
        "kwargs": {
          "column": "Sulfate",
          "min_value": 0.0,
          "max_value": 500.0
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "missing_count": 0,
        "missing_percent": 0.0,
        "unexpected_count": 77,
        "unexpected_percent": 7.7,
        "unexpected_percent_total": 7.7,
        "unexpected_percent_nonmissing": 7.7,
        "partial_unexpected_list": [
          572.1839259153692,
          -117.74064324191812,
          505.6248885378063,
          607.0987852416504,
          -40.0596262244718,
          523.0819858027259,
          578.9371719170545,
          606.3560811235188,
          523.0921182924519,
          629.3855043832017,
          541.9568689997325,
          -36.765300083877776,
          512.236645384958,
          542.1203854842961,
          519.9181596259766,
          578.565267217325,
          599.1351649837748,
          658.4046274889056,
          519.2235841207424,
          503.9103130104929
        ]
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_match_regex",
        "kwargs": {
          "column": "Conductivity",
          "regex": "^\\d*\\.?\\d*$"
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "missing_count": 0,
        "missing_percent": 0.0,
        "unexpected_count": 0,
        "unexpected_percent": 0.0,
        "unexpected_percent_total": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "partial_unexpected_list": []
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_not_be_null",
        "kwargs": {
          "column": "Conductivity"
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "unexpected_count": 0,
        "unexpected_percent": 0.0,
        "unexpected_percent_total": 0.0,
        "partial_unexpected_list": []
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_between",
        "kwargs": {
          "column": "Conductivity",
          "min_value": 0.0,
          "max_value": 2000.0
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "missing_count": 0,
        "missing_percent": 0.0,
        "unexpected_count": 0,
        "unexpected_percent": 0.0,
        "unexpected_percent_total": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "partial_unexpected_list": []
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_match_regex",
        "kwargs": {
          "column": "Organic_carbon",
          "regex": "^\\d*\\.?\\d*$"
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "missing_count": 0,
        "missing_percent": 0.0,
        "unexpected_count": 0,
        "unexpected_percent": 0.0,
        "unexpected_percent_total": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "partial_unexpected_list": []
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_not_be_null",
        "kwargs": {
          "column": "Organic_carbon"
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "unexpected_count": 0,
        "unexpected_percent": 0.0,
        "unexpected_percent_total": 0.0,
        "partial_unexpected_list": []
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": false,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_between",
        "kwargs": {
          "column": "Organic_carbon",
          "min_value": 0.0,
          "max_value": 20.0
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "missing_count": 0,
        "missing_percent": 0.0,
        "unexpected_count": 20,
        "unexpected_percent": 2.0,
        "unexpected_percent_total": 2.0,
        "unexpected_percent_nonmissing": 2.0,
        "partial_unexpected_list": [
          20.253340700212764,
          23.10280420555984,
          20.80789809753464,
          24.30595376360235,
          20.33071192107036,
          21.128967647156635,
          20.28170485372474,
          20.927131932179176,
          20.429007867951192,
          21.03419311564145,
          21.89488477124072,
          22.47110122110099,
          20.206056900803564,
          23.44816592983481,
          21.49079321496872,
          20.528816188553904,
          20.10113128176681,
          20.486789486119,
          20.37709996574724,
          21.3967781521238
        ]
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_match_regex",
        "kwargs": {
          "column": "Trihalomethanes",
          "regex": "^\\d*\\.?\\d*$"
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "missing_count": 0,
        "missing_percent": 0.0,
        "unexpected_count": 0,
        "unexpected_percent": 0.0,
        "unexpected_percent_total": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "partial_unexpected_list": []
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_not_be_null",
        "kwargs": {
          "column": "Trihalomethanes"
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "unexpected_count": 0,
        "unexpected_percent": 0.0,
        "unexpected_percent_total": 0.0,
        "partial_unexpected_list": []
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": false,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_between",
        "kwargs": {
          "column": "Trihalomethanes",
          "min_value": 0.0,
          "max_value": 120.0
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "missing_count": 0,
        "missing_percent": 0.0,
        "unexpected_count": 1,
        "unexpected_percent": 0.1,
        "unexpected_percent_total": 0.1,
        "unexpected_percent_nonmissing": 0.1,
        "partial_unexpected_list": [
          123.0642939448237
        ]
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_match_regex",
        "kwargs": {
          "column": "Turbidity",
          "regex": "^\\d*\\.?\\d*$"
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "missing_count": 0,
        "missing_percent": 0.0,
        "unexpected_count": 0,
        "unexpected_percent": 0.0,
        "unexpected_percent_total": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "partial_unexpected_list": []
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_not_be_null",
        "kwargs": {
          "column": "Turbidity"
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "unexpected_count": 0,
        "unexpected_percent": 0.0,
        "unexpected_percent_total": 0.0,
        "partial_unexpected_list": []
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_between",
        "kwargs": {
          "column": "Turbidity",
          "min_value": 0.0,
          "max_value": 10.0
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "missing_count": 0,
        "missing_percent": 0.0,
        "unexpected_count": 0,
        "unexpected_percent": 0.0,
        "unexpected_percent_total": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "partial_unexpected_list": []
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_not_be_null",
        "kwargs": {
          "column": "Potability"
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "unexpected_count": 0,
        "unexpected_percent": 0.0,
        "unexpected_percent_total": 0.0,
        "partial_unexpected_list": []
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_in_set",
        "kwargs": {
          "column": "Potability",
          "value_set": [
            0,
            1
          ]
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "missing_count": 0,
        "missing_percent": 0.0,
        "unexpected_count": 0,
        "unexpected_percent": 0.0,
        "unexpected_percent_total": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "partial_unexpected_list": []
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    }
  ],
  "evaluation_parameters": {},
  "statistics": {
    "evaluated_expectations": 29,
    "successful_expectations": 19,
    "unsuccessful_expectations": 10,
    "success_percent": 65.51724137931035
  },
  "meta": {
    "great_expectations_version": "0.18.13",
    "expectation_suite_name": "ex_dyali",
    "run_id": {
      "run_name": null,
      "run_time": "2024-05-18T02:06:30.968576+00:00"
    },
    "batch_kwargs": {
      "ge_batch_id": "3e5f6f1e-14bb-11ef-844c-0242ac120003"
    },
    "batch_markers": {},
    "batch_parameters": {},
    "validation_time": "20240518T020630.968305Z",
    "expectation_suite_meta": {
      "great_expectations_version": "0.18.12"
    }
  }
}
[2024-05-18T02:06:31.097+0000] {logging_mixin.py:188} INFO - /opt/***/dags/raw-data/data_part_9.csv is bad data
[2024-05-18T02:06:31.137+0000] {logging_mixin.py:188} INFO - Bad data saved at /opt/***/dags/bad-data/data_part_9.csv
[2024-05-18T02:06:31.138+0000] {python.py:237} INFO - Done. Returned value was: None
[2024-05-18T02:06:31.138+0000] {taskinstance.py:441} INFO - ::group::Post task execution logs
[2024-05-18T02:06:31.150+0000] {taskinstance.py:1206} INFO - Marking task as SUCCESS. dag_id=data_ingestion_pipelines_2, task_id=validate_data, run_id=scheduled__2024-05-17T00:00:00+00:00, execution_date=20240517T000000, start_date=20240518T020630, end_date=20240518T020631
[2024-05-18T02:06:31.173+0000] {local_task_job_runner.py:240} INFO - Task exited with return code 0
[2024-05-18T02:06:31.205+0000] {taskinstance.py:3498} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-05-18T02:06:31.208+0000] {local_task_job_runner.py:222} INFO - ::endgroup::
