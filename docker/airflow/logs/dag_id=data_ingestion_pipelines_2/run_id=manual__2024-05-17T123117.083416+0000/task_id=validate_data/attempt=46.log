[2024-05-18T00:18:29.592+0000] {local_task_job_runner.py:120} INFO - ::group::Pre task execution logs
[2024-05-18T00:18:29.651+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: data_ingestion_pipelines_2.validate_data manual__2024-05-17T12:31:17.083416+00:00 [queued]>
[2024-05-18T00:18:29.663+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: data_ingestion_pipelines_2.validate_data manual__2024-05-17T12:31:17.083416+00:00 [queued]>
[2024-05-18T00:18:29.664+0000] {taskinstance.py:2306} INFO - Starting attempt 46 of 46
[2024-05-18T00:18:29.685+0000] {taskinstance.py:2330} INFO - Executing <Task(PythonOperator): validate_data> on 2024-05-17 12:31:17.083416+00:00
[2024-05-18T00:18:29.702+0000] {standard_task_runner.py:90} INFO - Running: ['***', 'tasks', 'run', 'data_ingestion_pipelines_2', 'validate_data', 'manual__2024-05-17T12:31:17.083416+00:00', '--job-id', '132', '--raw', '--subdir', 'DAGS_FOLDER/data-ingestion-dag.py', '--cfg-path', '/tmp/tmptr8bev0d']
[2024-05-18T00:18:29.705+0000] {standard_task_runner.py:91} INFO - Job 132: Subtask validate_data
[2024-05-18T00:18:29.709+0000] {warnings.py:110} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:61: DeprecationWarning: This process (pid=23637) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2024-05-18T00:18:29.712+0000] {standard_task_runner.py:63} INFO - Started process 23657 to run task
[2024-05-18T00:18:29.780+0000] {task_command.py:426} INFO - Running <TaskInstance: data_ingestion_pipelines_2.validate_data manual__2024-05-17T12:31:17.083416+00:00 [running]> on host e512d0910ba5
[2024-05-18T00:18:29.916+0000] {taskinstance.py:2648} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='***' AIRFLOW_CTX_DAG_ID='data_ingestion_pipelines_2' AIRFLOW_CTX_TASK_ID='validate_data' AIRFLOW_CTX_EXECUTION_DATE='2024-05-17T12:31:17.083416+00:00' AIRFLOW_CTX_TRY_NUMBER='46' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-05-17T12:31:17.083416+00:00'
[2024-05-18T00:18:29.917+0000] {taskinstance.py:430} INFO - ::endgroup::
[2024-05-18T00:18:29.949+0000] {logging_mixin.py:188} INFO - file_path in validate_data is  /opt/***/dags/raw-data/data_part_1.csv
[2024-05-18T00:18:29.950+0000] {logging_mixin.py:188} INFO - data_asset_name is  data_part_1
[2024-05-18T00:18:29.986+0000] {logging_mixin.py:188} INFO - Data types after reading CSV:
[2024-05-18T00:18:29.988+0000] {logging_mixin.py:188} INFO -  ph                 float64
Hardness           float64
Solids             float64
Sulfate            float64
Conductivity       float64
Organic_carbon     float64
Trihalomethanes    float64
Turbidity          float64
Potability           Int64
dtype: object
[2024-05-18T00:18:30.037+0000] {warnings.py:110} WARNING - /home/***/.local/lib/python3.12/site-packages/great_expectations/data_context/data_context/base_data_context.py:158: DeprecationWarning: DataContext and BaseDataContext are deprecated as of v0.17.10 and will be removed in v0.20. Please use gx.get_context instead.
  warnings.warn(

[2024-05-18T00:18:30.093+0000] {file_data_context.py:222} INFO - FileDataContext loading fluent config
[2024-05-18T00:18:30.120+0000] {config.py:187} INFO - Loading 'datasources' ->
[]
[2024-05-18T00:18:30.638+0000] {data_asset.py:541} INFO - 	29 expectation(s) included in expectation_suite.
[2024-05-18T00:18:30.736+0000] {logging_mixin.py:188} INFO - validation_results: {
  "success": false,
  "results": [
    {
      "success": false,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_match_regex",
        "kwargs": {
          "column": "ph",
          "regex": "^\\d*\\.?\\d*$"
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "missing_count": 160,
        "missing_percent": 16.0,
        "unexpected_count": 13,
        "unexpected_percent": 1.5476190476190477,
        "unexpected_percent_total": 1.3,
        "unexpected_percent_nonmissing": 1.5476190476190477,
        "partial_unexpected_list": [
          -999.0,
          -999.0,
          -999.0,
          -999.0,
          -999.0,
          -999.0,
          -999.0,
          -999.0,
          -999.0,
          -999.0,
          -999.0,
          -999.0,
          -999.0
        ]
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_of_type",
        "kwargs": {
          "column": "ph",
          "type_": "float"
        },
        "meta": {}
      },
      "result": {
        "observed_value": "float64"
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": false,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_between",
        "kwargs": {
          "column": "ph",
          "min_value": 0.0,
          "max_value": 14.0
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "missing_count": 160,
        "missing_percent": 16.0,
        "unexpected_count": 13,
        "unexpected_percent": 1.5476190476190477,
        "unexpected_percent_total": 1.3,
        "unexpected_percent_nonmissing": 1.5476190476190477,
        "partial_unexpected_list": [
          -999.0,
          -999.0,
          -999.0,
          -999.0,
          -999.0,
          -999.0,
          -999.0,
          -999.0,
          -999.0,
          -999.0,
          -999.0,
          -999.0,
          -999.0
        ]
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_match_regex",
        "kwargs": {
          "column": "Hardness",
          "regex": "^\\d*\\.?\\d*$"
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "missing_count": 11,
        "missing_percent": 1.0999999999999999,
        "unexpected_count": 0,
        "unexpected_percent": 0.0,
        "unexpected_percent_total": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "partial_unexpected_list": []
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_of_type",
        "kwargs": {
          "column": "Hardness",
          "type_": "float"
        },
        "meta": {}
      },
      "result": {
        "observed_value": "float64"
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_between",
        "kwargs": {
          "column": "Hardness",
          "min_value": 0.0,
          "max_value": 1000.0
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "missing_count": 11,
        "missing_percent": 1.0999999999999999,
        "unexpected_count": 0,
        "unexpected_percent": 0.0,
        "unexpected_percent_total": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "partial_unexpected_list": []
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_match_regex",
        "kwargs": {
          "column": "Solids",
          "regex": "^\\d*\\.?\\d*$"
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "missing_count": 9,
        "missing_percent": 0.8999999999999999,
        "unexpected_count": 0,
        "unexpected_percent": 0.0,
        "unexpected_percent_total": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "partial_unexpected_list": []
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_of_type",
        "kwargs": {
          "column": "Solids",
          "type_": "float"
        },
        "meta": {}
      },
      "result": {
        "observed_value": "float64"
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": false,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_between",
        "kwargs": {
          "column": "Solids",
          "min_value": 0.0,
          "max_value": 50000.0
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "missing_count": 9,
        "missing_percent": 0.8999999999999999,
        "unexpected_count": 2,
        "unexpected_percent": 0.20181634712411706,
        "unexpected_percent_total": 0.2,
        "unexpected_percent_nonmissing": 0.20181634712411706,
        "partial_unexpected_list": [
          52318.91729758968,
          52060.22680026684
        ]
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": false,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_match_regex",
        "kwargs": {
          "column": "Chloramines",
          "regex": "^\\d*\\.?\\d*$"
        },
        "meta": {}
      },
      "result": {},
      "meta": {},
      "exception_info": {
        "raised_exception": true,
        "exception_message": "KeyError: 'Chloramines'",
        "exception_traceback": "Traceback (most recent call last):\n  File \"/home/***/.local/lib/python3.12/site-packages/pandas/core/indexes/base.py\", line 3791, in get_loc\n    return self._engine.get_loc(casted_key)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"index.pyx\", line 152, in pandas._libs.index.IndexEngine.get_loc\n  File \"index.pyx\", line 181, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Chloramines'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/***/.local/lib/python3.12/site-packages/great_expectations/data_asset/data_asset.py\", line 244, in wrapper\n    return_obj = func(self, **evaluation_args)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/***/.local/lib/python3.12/site-packages/great_expectations/dataset/pandas_dataset.py\", line 81, in inner_wrapper\n    series = data[column]\n             ~~~~^^^^^^^^\n  File \"/home/***/.local/lib/python3.12/site-packages/pandas/core/frame.py\", line 3893, in __getitem__\n    indexer = self.columns.get_loc(key)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/***/.local/lib/python3.12/site-packages/pandas/core/indexes/base.py\", line 3798, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Chloramines'\n"
      }
    },
    {
      "success": false,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_of_type",
        "kwargs": {
          "column": "Chloramines",
          "type_": "float"
        },
        "meta": {}
      },
      "result": {},
      "meta": {},
      "exception_info": {
        "raised_exception": true,
        "exception_traceback": "Traceback (most recent call last):\n  File \"/home/***/.local/lib/python3.12/site-packages/pandas/core/indexes/base.py\", line 3791, in get_loc\n    return self._engine.get_loc(casted_key)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"index.pyx\", line 152, in pandas._libs.index.IndexEngine.get_loc\n  File \"index.pyx\", line 181, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Chloramines'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/***/.local/lib/python3.12/site-packages/great_expectations/data_asset/data_asset.py\", line 820, in validate\n    result = expectation_method(\n             ^^^^^^^^^^^^^^^^^^^\n  File \"/home/***/.local/lib/python3.12/site-packages/great_expectations/data_asset/util.py\", line 78, in f\n    return self.mthd(obj, *args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/***/.local/lib/python3.12/site-packages/great_expectations/dataset/pandas_dataset.py\", line 716, in expect_column_values_to_be_of_type\n    self[column].dtype != \"object\"\n    ~~~~^^^^^^^^\n  File \"/home/***/.local/lib/python3.12/site-packages/pandas/core/frame.py\", line 3893, in __getitem__\n    indexer = self.columns.get_loc(key)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/***/.local/lib/python3.12/site-packages/pandas/core/indexes/base.py\", line 3798, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Chloramines'\n",
        "exception_message": "'Chloramines'"
      }
    },
    {
      "success": false,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_between",
        "kwargs": {
          "column": "Chloramines",
          "min_value": 0.0,
          "max_value": 10.0
        },
        "meta": {}
      },
      "result": {},
      "meta": {},
      "exception_info": {
        "raised_exception": true,
        "exception_message": "KeyError: 'Chloramines'",
        "exception_traceback": "Traceback (most recent call last):\n  File \"/home/***/.local/lib/python3.12/site-packages/pandas/core/indexes/base.py\", line 3791, in get_loc\n    return self._engine.get_loc(casted_key)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"index.pyx\", line 152, in pandas._libs.index.IndexEngine.get_loc\n  File \"index.pyx\", line 181, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'Chloramines'\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/***/.local/lib/python3.12/site-packages/great_expectations/data_asset/data_asset.py\", line 244, in wrapper\n    return_obj = func(self, **evaluation_args)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/***/.local/lib/python3.12/site-packages/great_expectations/dataset/pandas_dataset.py\", line 81, in inner_wrapper\n    series = data[column]\n             ~~~~^^^^^^^^\n  File \"/home/***/.local/lib/python3.12/site-packages/pandas/core/frame.py\", line 3893, in __getitem__\n    indexer = self.columns.get_loc(key)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/***/.local/lib/python3.12/site-packages/pandas/core/indexes/base.py\", line 3798, in get_loc\n    raise KeyError(key) from err\nKeyError: 'Chloramines'\n"
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_match_regex",
        "kwargs": {
          "column": "Sulfate",
          "regex": "^\\d*\\.?\\d*$"
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "missing_count": 248,
        "missing_percent": 24.8,
        "unexpected_count": 0,
        "unexpected_percent": 0.0,
        "unexpected_percent_total": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "partial_unexpected_list": []
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_of_type",
        "kwargs": {
          "column": "Sulfate",
          "type_": "float"
        },
        "meta": {}
      },
      "result": {
        "observed_value": "float64"
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_between",
        "kwargs": {
          "column": "Sulfate",
          "min_value": 0.0,
          "max_value": 500.0
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "missing_count": 248,
        "missing_percent": 24.8,
        "unexpected_count": 0,
        "unexpected_percent": 0.0,
        "unexpected_percent_total": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "partial_unexpected_list": []
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_match_regex",
        "kwargs": {
          "column": "Conductivity",
          "regex": "^\\d*\\.?\\d*$"
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "missing_count": 10,
        "missing_percent": 1.0,
        "unexpected_count": 0,
        "unexpected_percent": 0.0,
        "unexpected_percent_total": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "partial_unexpected_list": []
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_of_type",
        "kwargs": {
          "column": "Conductivity",
          "type_": "float"
        },
        "meta": {}
      },
      "result": {
        "observed_value": "float64"
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_between",
        "kwargs": {
          "column": "Conductivity",
          "min_value": 0.0,
          "max_value": 2000.0
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "missing_count": 10,
        "missing_percent": 1.0,
        "unexpected_count": 0,
        "unexpected_percent": 0.0,
        "unexpected_percent_total": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "partial_unexpected_list": []
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_match_regex",
        "kwargs": {
          "column": "Organic_carbon",
          "regex": "^\\d*\\.?\\d*$"
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "missing_count": 10,
        "missing_percent": 1.0,
        "unexpected_count": 0,
        "unexpected_percent": 0.0,
        "unexpected_percent_total": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "partial_unexpected_list": []
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_of_type",
        "kwargs": {
          "column": "Organic_carbon",
          "type_": "float"
        },
        "meta": {}
      },
      "result": {
        "observed_value": "float64"
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": false,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_between",
        "kwargs": {
          "column": "Organic_carbon",
          "min_value": 0.0,
          "max_value": 20.0
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "missing_count": 10,
        "missing_percent": 1.0,
        "unexpected_count": 33,
        "unexpected_percent": 3.3333333333333335,
        "unexpected_percent_total": 3.3000000000000003,
        "unexpected_percent_nonmissing": 3.3333333333333335,
        "partial_unexpected_list": [
          20.39702184072246,
          22.46989198835695,
          23.917601261274967,
          21.84591625254205,
          20.09841289135693,
          20.18405147231266,
          20.393781666520056,
          23.39951606024522,
          20.23252347966354,
          22.517870469892785,
          22.50467943991441,
          20.29627438558896,
          20.6961980569385,
          20.16073441639145,
          23.3732650359234,
          21.278094527630746,
          22.84652910661083,
          22.6868367426506,
          21.940189616356463,
          20.725805913345425
        ]
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_match_regex",
        "kwargs": {
          "column": "Trihalomethanes",
          "regex": "^\\d*\\.?\\d*$"
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "missing_count": 63,
        "missing_percent": 6.3,
        "unexpected_count": 0,
        "unexpected_percent": 0.0,
        "unexpected_percent_total": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "partial_unexpected_list": []
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_of_type",
        "kwargs": {
          "column": "Trihalomethanes",
          "type_": "float"
        },
        "meta": {}
      },
      "result": {
        "observed_value": "float64"
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": false,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_between",
        "kwargs": {
          "column": "Trihalomethanes",
          "min_value": 0.0,
          "max_value": 120.0
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "missing_count": 63,
        "missing_percent": 6.3,
        "unexpected_count": 1,
        "unexpected_percent": 0.10672358591248667,
        "unexpected_percent_total": 0.1,
        "unexpected_percent_nonmissing": 0.10672358591248667,
        "partial_unexpected_list": [
          120.03007700530677
        ]
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_match_regex",
        "kwargs": {
          "column": "Turbidity",
          "regex": "^\\d*\\.?\\d*$"
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "missing_count": 6,
        "missing_percent": 0.6,
        "unexpected_count": 0,
        "unexpected_percent": 0.0,
        "unexpected_percent_total": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "partial_unexpected_list": []
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_of_type",
        "kwargs": {
          "column": "Turbidity",
          "type_": "float"
        },
        "meta": {}
      },
      "result": {
        "observed_value": "float64"
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_between",
        "kwargs": {
          "column": "Turbidity",
          "min_value": 0.0,
          "max_value": 10.0
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "missing_count": 6,
        "missing_percent": 0.6,
        "unexpected_count": 0,
        "unexpected_percent": 0.0,
        "unexpected_percent_total": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "partial_unexpected_list": []
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_of_type",
        "kwargs": {
          "column": "Potability",
          "type_": "int"
        },
        "meta": {}
      },
      "result": {
        "observed_value": "int64"
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    },
    {
      "success": true,
      "expectation_config": {
        "expectation_type": "expect_column_values_to_be_in_set",
        "kwargs": {
          "column": "Potability",
          "value_set": [
            0,
            1
          ]
        },
        "meta": {}
      },
      "result": {
        "element_count": 1000,
        "missing_count": 10,
        "missing_percent": 1.0,
        "unexpected_count": 0,
        "unexpected_percent": 0.0,
        "unexpected_percent_total": 0.0,
        "unexpected_percent_nonmissing": 0.0,
        "partial_unexpected_list": []
      },
      "meta": {},
      "exception_info": {
        "raised_exception": false,
        "exception_message": null,
        "exception_traceback": null
      }
    }
  ],
  "evaluation_parameters": {},
  "statistics": {
    "evaluated_expectations": 29,
    "successful_expectations": 21,
    "unsuccessful_expectations": 8,
    "success_percent": 72.41379310344827
  },
  "meta": {
    "great_expectations_version": "0.18.13",
    "expectation_suite_name": "ex_dyali",
    "run_id": {
      "run_name": null,
      "run_time": "2024-05-18T00:18:30.637434+00:00"
    },
    "batch_kwargs": {
      "ge_batch_id": "27cb7eb4-14ac-11ef-a33b-0242c0a88003"
    },
    "batch_markers": {},
    "batch_parameters": {},
    "validation_time": "20240518T001830.637189Z",
    "expectation_suite_meta": {
      "great_expectations_version": "0.18.12"
    }
  }
}
[2024-05-18T00:18:30.790+0000] {logging_mixin.py:188} INFO - /opt/***/dags/raw-data/data_part_1.csv is bad data
[2024-05-18T00:18:30.837+0000] {logging_mixin.py:188} INFO - Bad data saved at /opt/***/dags/bad-data/data_part_1.csv
[2024-05-18T00:18:30.838+0000] {python.py:237} INFO - Done. Returned value was: None
[2024-05-18T00:18:30.838+0000] {taskinstance.py:441} INFO - ::group::Post task execution logs
[2024-05-18T00:18:30.851+0000] {taskinstance.py:1206} INFO - Marking task as SUCCESS. dag_id=data_ingestion_pipelines_2, task_id=validate_data, run_id=manual__2024-05-17T12:31:17.083416+00:00, execution_date=20240517T123117, start_date=20240518T001829, end_date=20240518T001830
[2024-05-18T00:18:30.894+0000] {local_task_job_runner.py:240} INFO - Task exited with return code 0
[2024-05-18T00:18:30.937+0000] {taskinstance.py:3498} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2024-05-18T00:18:30.940+0000] {local_task_job_runner.py:222} INFO - ::endgroup::
